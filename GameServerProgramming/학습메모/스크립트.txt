[ 스크립트(Script) ]

스크립트 언어 자체를 학습하는 것이 아님.
스크립트 언어를 어떻게 게임서버에 연동시키는 지에 대한 내용이다.

# 정의
- 사용하기 편한 언어 => 생산성이 높다.
같은 시간에 더 많은 프로그래밍을 할 수 있고, 디버깅을 할 수 있다.
C++을 학습하는 난이도에 비해 쉽고 생산성을 위해 사용하기 좋다.
온라인 코딩테스트 진행 시에, 일부 경우에는 Python이 압도적으로 유리하다.

# 특징
- 직관적인 문법 :: SyntexError나 기타 잡다한 에러가 나지 않고 직관적이기 때문에 프로그래머가 오해하기 쉽지 않다. 즉 생각한대로 프로그래밍을 할 수 있다.
- 관용적인 문법 :: 즉 C에서 치명적인 문법같은 내용들이 상당히 관용적으로 사용할 수 있다. 예시로 변수를 선언해 줄 필요가 없다. 알아서 해준다.
- 성능보다는 표현력에 중심
- 인터프리팅 (<-> 컴파일러)

# 게임에서의 활용
- 데이터 정의 :: 유연하게 데이터 정의 가능
- NPC AI :: 서버 프로그래머가 NPC AI를 건드리면 생산성이 떨어지고, 그래서 담당하는 사람이 직접 건드릴 수 있도록 한다. 수정이 굉장히 잦은 부분.
- Non-programmer :: 데이터 정의는 기획팀에서 하는 것. 직접 수정하고 돌려보고 하는 것이 생산성이 높고 효율적이다.

# 게임에 사용 시 장점
  - 생산성
    * 빠른 개발 속도
    * Live edit, 서버 재 컴파일 불필요
# 게임에 사용 시 단점
  - 성능 : 느린 실행 속도 :: 동접이 안나온다는 가장 큰 단점. 모든 몬스터를 스크립트로 만들지는 않음. 너무 느리기 때문에, 일부만 스크립트로 구현하고 나머지는 보통 하드 코딩으로 구현함
# 종류
  - 기존 언어
    * Visual Basic, C#, Java, Python, LUA, XML, javascript  :: 요즘은 Python 을 많이 사용한다. LUA도 많이 씀.
  - Custom
    * LPC, UnrealScript

# 요구
  - 배우기 쉬울 것
    * 쉬운 문법 :: C++보다 어려운 스크립트 언어도 있음. 진입장벽이 낮아야 한다는 점이 매우 중요함.
  - OOP 기능 제공 :: OOP : Object Oriented Programming
    * Object -> Living -> Monster -> Orc -> 네루바 오크
  - Multi-thread기능 제공(옵션)
    * Multi-thread환경에서의 동작 보장
      - Reentrant
    * 쓰레드별로 별도의 인터프리터 객체를 실행할 수도 있음.
    * 멀티쓰레드 프로그래밍이 필요한 경우
      - 개별 컨텐츠 구현이 아니라 시스템을 구현할 경우
      - 예) EVE-online  

# 스크립트 언어의 특징
  - LUA : 간단, 성능이 뛰어남, 가장 많이 사용
  - Python : 생산성이 높다. Multithread성능에 문제 있음 :: 파이썬 자체에 글로벌 락이 있어서, Multithread 성능 향상이 되지 않는 점 때문에 게임에서 사용하지 않는다.
  - Java :  높은 인지도, garbage collection으로 인한 성능 저하 :: garbage collection을 하는 순간 java 프로그램 전체가 멈춰버린다. 그래서 사용할 수가 없다.
  - C# : 성능, multithread 지원 :: C++과 비슷하게 파워풀하다. 단점은 연동부분이다. 
  - XML : 언어가 아님
보통 LUA를 많이 사용한다.